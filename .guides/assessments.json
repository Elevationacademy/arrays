[
 {
  "type": "test",
  "taskId": "test-2317839833",
  "source": {
   "name": "Exercise 1",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "Given the following code\n\n```javascript\nlet userPosition = 3\nlet userIDs = [\"user_19921231111\", \"user_0119381334178887\", \"user_01193842221237\", \"user_732999218401\", \"user_872341\"]\n```\nConsole log the the userID at `userPosition`\nMake sure to use the `userPosition` variable",
   "command": "node .guides/.test/test-runner ex-1",
   "learningObjectives": "",
   "points": 1,
   "timeoutSeconds": 40
  }
 },
 {
  "type": "test",
  "taskId": "test-1591226608",
  "source": {
   "name": "Exercise 2",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "Given the following code\n\n```javascript\nlet leaders = [\"Duke\", \"Bishop\", \"King\"]\n```\n\nAdd \"Empereor\" to the end of the array, and \"Lord\" to the beginning",
   "command": "node .guides/.test/test-runner ex-2",
   "learningObjectives": "",
   "points": 1,
   "timeoutSeconds": 40
  }
 },
 {
  "type": "test",
  "taskId": "test-1169498200",
  "source": {
   "name": "Exercise 3",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "",
   "command": "",
   "learningObjectives": "",
   "points": 1,
   "timeoutSeconds": 40
  }
 },
 {
  "type": "test",
  "taskId": "test-1300547452",
  "source": {
   "name": "Exercise 3",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "Create an empty array\nNext, push two strings to the array: \"Katlin\", \"Kotlin\"\nNext, remove the second item from the array \nFinally, console log the array",
   "command": "node .guides/.test/test-runner ex-3",
   "learningObjectives": "",
   "points": 1,
   "timeoutSeconds": 40
  }
 },
 {
  "type": "test",
  "taskId": "test-1157045527",
  "source": {
   "name": "Exercise 4",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "*   Create an object called `library` that has a `books` **key**\n*   The **value** of `books` should be an array of book objects.\n*   Each book should have a `title` and `author` key.\n\nAdd `books` to your `myList` array. You've got this.",
   "command": "node .guides/.test/test-runner ex-4",
   "learningObjectives": "",
   "points": 1,
   "timeoutSeconds": 40
  }
 },
 {
  "type": "test",
  "taskId": "test-3968661351",
  "source": {
   "name": "Exercise 5",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "You have this setup code:\n\n```javascript\nconst reservations = {\n  Bob: { claimed: false },\n  Ted: { claimed: true }\n}\n\nconst name = prompt('Please enter the name for your reservation');\n```\n\nNote that `prompt` will show a popup on your screen and allow you to input some text - that text will be stored inside `name`\n\nThe above code is a reservation system where people can claim their reservations when they arrive.\n\nAfter receiving the name from the `prompt`,\n\n*   If the reservation exists and is unclaimed, welcome the user (console log)\n*   If the reservation exists and is already claimed, inform the user about the situation\n*   If there is no reservation, tell the user there is nothing under their name\n\nUse 'Bob' and 'Ted' to test your code:\n\n*   When you test Bob, it should say \"Welcome, Bob\"\n*   When you test Ted, it should say \"Hmm, someone already claimed this reservation\"\n*   If you try a different name, it should say \"You have no reservation\"\n\n**Note:** Definitely upload this code to Github, you might want to use it later on ;)",
   "command": "node .guides/.test/test-runner ex-5",
   "learningObjectives": "",
   "points": 1,
   "timeoutSeconds": 40
  }
 },
 {
  "type": "test",
  "taskId": "test-3515120923",
  "source": {
   "name": "Exercise 5.1",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "It so happens that our restaurant has a bunch of open tables. Therefore, if someone doesn't have a reservation, add it to the reservations object and set \"claimed\" to true for that person.",
   "command": "node .guides/.test/test-runner ex-5-1",
   "learningObjectives": "",
   "points": 1,
   "timeoutSeconds": 40
  }
 },
 {
  "type": "test",
  "taskId": "test-3168900293",
  "source": {
   "name": "Exercise 5.2",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "As of now, 'Ted' and 'ted' are two different names in our system. Change your code (including the `reservations` object keys) so that 'ted' and 'Ted' or even 'TeD' are all the same.  \nYou might be interested in [toLowerCase](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase) - and don't forget about **bracket notation**; using a variable and modifying it will certainly help here.",
   "command": "node test-runner ex-5-2",
   "learningObjectives": "",
   "points": 1,
   "timeoutSeconds": 40
  }
 },
 {
  "type": "test",
  "taskId": "test-1711026430",
  "source": {
   "name": "Extension Exercise",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "This one is not hard, it's just involved. Take a breath, take your time.\n\nGiven these two variables:\n\n```javascript\nconst date = 3\n\nconst kitchen = {\n    owner: \"Geraldine\",\n    hasOven: true/false, // choose one\n    fridge: {\n        price: 500,\n        works: true/false, // choose one\n        items: [\n            { name: \"cheese\", expiryDate: 7 },\n            { name: \"raddish\", expiryDate: 2 },\n            { name: \"bread\", expiryDate: 1 }\n        ]\n    }\n}\n\n```\n\n  \nYou're going to console log of these four options _conditionally_, based on the values you selected for `hasOven` and `works`:\n\n![](https://s3-us-west-2.amazonaws.com/learn-app/Screen+Shot+2018-11-11+at+15.30.34.png)\n\nNote that the _expired 1 day ago_ should be calculated based off the `date` variable and `expiryDate` property.  \nAlso, _she'll have to pay 250 to fix the fridge_ should be calculated based off the `price` property in `fridge` - it should be half the price.\n\n<b>Make sure</b> to only use information from the variables you've been given. \n<br><b>Do not</b> write out \"raddish\". Instead, use <code>kitchen.fridge.items...</code>\n\n**Hint:** Use **helper variables** to make your life easier. For instance:\n\n```javascript\nconst hasOven = kitchen.hasOven\n//...\n\nif(hasOven){\n  //...\n  //this will be cleaner than doing: \n  //if(kitchen.hasOven){...\n```\n\n**Note**: this exercise is not tested automatically and will always be marked as passed.",
   "command": "",
   "learningObjectives": "",
   "points": 1,
   "timeoutSeconds": 40
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1978898084",
  "source": {
   "name": "Question #1",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "You can store the following data-types in an array:",
   "points": "999",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "678cdc90-fd1a-7307-749a-8d7dc0b55cda",
     "correct": false,
     "answer": "Strings, numbers, and booleans"
    },
    {
     "_id": "e41c93d5-83d1-f5d7-eeeb-770c7902e145",
     "correct": false,
     "answer": "Strings, numbers, booleans, and other arrays"
    },
    {
     "_id": "e2541280-71db-5c0e-939b-8e63d80b4b4b",
     "correct": false,
     "answer": "Strings, numbers, booleans, and other arrays (but only one level deep)"
    },
    {
     "_id": "de05ef37-2949-7a27-a95e-98635c38b2ea",
     "correct": true,
     "answer": "Anything"
    }
   ]
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4127895486",
  "source": {
   "name": "Question #2",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "Given the following code: `let x = ages[3] + 20`, assuming the array `ages` looks like this: `[0, 17, 2, 4, 31, 3]`, what will `x` be?",
   "points": "999",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "41e637f6-2588-0971-b590-9dd395c3522f",
     "correct": false,
     "answer": "23"
    },
    {
     "_id": "c5556121-bd84-f26b-0caa-296f267262fb",
     "correct": false,
     "answer": "22"
    },
    {
     "_id": "83384105-19dc-677f-17bf-701df5db6883",
     "correct": false,
     "answer": "51"
    },
    {
     "_id": "152d6c67-e652-5e31-ee3d-11d443de6c4c",
     "correct": true,
     "answer": "24"
    }
   ]
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3482247821",
  "source": {
   "name": "Question #3",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "Given the following: \n`let x = [ \n\t{name: “ant”, \n\t  color: “brown”}, \n\t{name: “flower”, \n\t  color: “green”}\n]`\nWhat will change after we do `x.push( {name: “ant”, color: “green”} )` ?",
   "points": "999",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "1c4e1b02-6ff8-45ed-45be-0d3065add8f5",
     "correct": false,
     "answer": "Now the value of `x[0].color` is “green”"
    },
    {
     "_id": "15689196-78cc-45a0-637f-4db6d4880484",
     "correct": false,
     "answer": "Now the value of `x[1].name` is “ant”"
    },
    {
     "_id": "3a5dc542-bbf5-d25c-b71a-17656c9b76da",
     "correct": true,
     "answer": "Now the value of `x[2].name` is “ant”"
    },
    {
     "_id": "31746e3b-e10b-6b5a-cfcf-4990b46731f6",
     "correct": false,
     "answer": "None of the above"
    }
   ]
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2304501975",
  "source": {
   "name": "Question #4",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "Given the object `let x = {word: 13}`, what will the value of `x.word` be after we do `x.word++`?",
   "points": "999",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "7f86e48c-1c55-47db-bbec-2213eee055a1",
     "correct": false,
     "answer": "No change"
    },
    {
     "_id": "d0aff44a-fd29-e08c-e589-73412b2e6803",
     "correct": true,
     "answer": "14"
    },
    {
     "_id": "7dad9cd8-b7e5-21a5-8114-65ca3418e686",
     "correct": false,
     "answer": "15"
    },
    {
     "_id": "3415e043-1d96-0e25-70a6-570e7aae4eeb",
     "correct": false,
     "answer": "None of the above"
    }
   ]
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3710867868",
  "source": {
   "name": "Question #5",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "Given the following:\n`let x = [“Roland”, “Dayna”, “Sue”]\nlet y = x\ny.push(“Shoobert”)`\nWhat will the value of `x[3]` be?",
   "points": "999",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "3df84bff-034c-c1e9-c0dd-fba1644160da",
     "correct": false,
     "answer": "Sue"
    },
    {
     "_id": "392ef0a5-cebe-4376-036f-4ba64eef2858",
     "correct": true,
     "answer": "Shoobert"
    },
    {
     "_id": "55536a0c-bf9d-1db2-33ec-f1242e7490ac",
     "correct": false,
     "answer": "undefined"
    },
    {
     "_id": "07cdc945-5bd3-fe0b-8d1a-0719bf6a9aa8",
     "correct": false,
     "answer": "It will throw an error"
    }
   ]
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1322692055",
  "source": {
   "name": "Question #6",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "How does splice work?",
   "points": "999",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "ee48cf6c-1238-d176-7117-15c2e2159188",
     "correct": false,
     "answer": "`splice(i)` removes the item at index `i`"
    },
    {
     "_id": "a3ca0411-7be0-c08b-7681-5467c505bbc2",
     "correct": false,
     "answer": "`splice(i, n)` removes all the items starting at index `i`, and ending at index `n`"
    },
    {
     "_id": "e3920ea2-e8db-2228-e2d7-00675bad33ff",
     "correct": false,
     "answer": "`splice(i)` removes all the items until index `i`"
    },
    {
     "_id": "d1bd4f5a-f699-f65c-e695-d26f3c8078f9",
     "correct": true,
     "answer": "`splice(i, n)` removes all the items starting at index `i`, and all the `n` items after"
    }
   ]
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3882597688",
  "source": {
   "name": "Question #7",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "If we have `x = [1, 2, 3]` and `y = [...x]`, what can we say about `x` and `y`?",
   "points": "999",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "ebc90704-fc06-c07d-0c6b-0a905afab4a0",
     "correct": false,
     "answer": "They are now references of one another, because arrays are reference types"
    },
    {
     "_id": "96bb1e17-c16b-8a57-35c0-66345648c000",
     "correct": true,
     "answer": "They have the same values but are not references because we used the spread operator"
    },
    {
     "_id": "970109b3-fc73-2e46-229c-48846b172dd3",
     "correct": false,
     "answer": "They are references of one another because we used the `spread` operator"
    },
    {
     "_id": "2e604e53-e2fd-73c6-cf9b-4e1696ee7269",
     "correct": false,
     "answer": "They have the same values but every new value we `push` will not be a reference because we used the spread operator"
    }
   ]
  }
 }
]