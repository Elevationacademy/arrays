{"numFailedTestSuites":1,"numFailedTests":3,"numPassedTestSuites":0,"numPassedTests":1,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTotalTestSuites":1,"numTotalTests":4,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1540474989288,"success":false,"testResults":[{"console":null,"failureMessage":"  ● `p1` and `p2` should be objects with the properties: `name` - a string, `age` - a number, and `city` - a string.\n\n    expect(received).toEqual(expected)\n\n    Expected value to equal:\n      [\"age\", \"city\", \"name\"]\n    Received:\n      []\n\n    Difference:\n\n    - Expected\n    + Received\n\n    - Array [\n    -   \"age\",\n    -   \"city\",\n    -   \"name\",\n    - ]\n    + Array []\n\n       6 |         expect(p).not.toBeInstanceOf(Array)\n       7 | \n    >  8 |         expect(Object.keys(p).sort()).toEqual([\"name\", \"age\", \"city\"].sort())\n         |                                       ^\n       9 | \n      10 |         for (let k of [p.name, p.city]) { expect(typeof k).toBe(\"string\") }\n      11 |         expect(typeof p.age).toBe(\"number\")\n\n      at toEqual (.guides/.test/ex-1.test.js:8:39)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (.guides/.test/ex-1.test.js:4:12)\n\n  ● Matching age and city should print '... wanted to date ...'\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"p1name wanted to date p2name\"\n    Received: \"\"\n\n      22 |         { name: \"p2name\", age: 23, city: \"Sherman\" })\n      23 | \n    > 24 |     expect(outputData.trim()).toBe(\"p1name wanted to date p2name\")\n         |                               ^\n      25 |     expect(outputData.includes(\"but couldn't\")).toBeFalsy()\n      26 | });\n      27 | \n\n      at Object.toBe (.guides/.test/ex-1.test.js:24:31)\n\n  ● Matching age but not city should print '... wanted to date ..., but couldn't'\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"p1name wanted to date p2name, but couldn't\"\n    Received: \"\"\n\n      33 |         { name: \"p2name\", age: 23, city: \"Mansher\" })\n      34 | \n    > 35 |     expect(outputData.trim()).toBe(\"p1name wanted to date p2name, but couldn't\")\n         |                               ^\n      36 | });\n      37 | \n      38 | test(\"No match on age should print nothing\", () => {\n\n      at Object.toBe (.guides/.test/ex-1.test.js:35:31)\n","numFailingTests":3,"numPassingTests":1,"numPendingTests":0,"perfStats":{"end":1540474990307,"start":1540474989783},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"/home/codio/workspace/.guides/.test/ex-1.test.js","testResults":[{"ancestorTitles":[],"duration":18,"failureMessages":["Error: expect(received).toEqual(expected)\n\nExpected value to equal:\n  [\"age\", \"city\", \"name\"]\nReceived:\n  []\n\nDifference:\n\n- Expected\n+ Received\n\n- Array [\n-   \"age\",\n-   \"city\",\n-   \"name\",\n- ]\n+ Array []\n    at toEqual (/home/codio/workspace/.guides/.test/ex-1.test.js:8:39)\n    at Array.forEach (<anonymous>)\n    at Object.forEach (/home/codio/workspace/.guides/.test/ex-1.test.js:4:12)\n    at Object.asyncJestTest (/home/codio/workspace/node_modules/jest-jasmine2/build/jasmine_async.js:108:37)\n    at resolve (/home/codio/workspace/node_modules/jest-jasmine2/build/queue_runner.js:56:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/codio/workspace/node_modules/jest-jasmine2/build/queue_runner.js:43:19)\n    at promise.then (/home/codio/workspace/node_modules/jest-jasmine2/build/queue_runner.js:87:41)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"],"fullName":"`p1` and `p2` should be objects with the properties: `name` - a string, `age` - a number, and `city` - a string.","location":null,"numPassingAsserts":0,"status":"failed","title":"`p1` and `p2` should be objects with the properties: `name` - a string, `age` - a number, and `city` - a string."},{"ancestorTitles":[],"duration":3,"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"p1name wanted to date p2name\"\nReceived: \"\"\n    at Object.toBe (/home/codio/workspace/.guides/.test/ex-1.test.js:24:31)\n    at Object.asyncJestTest (/home/codio/workspace/node_modules/jest-jasmine2/build/jasmine_async.js:108:37)\n    at resolve (/home/codio/workspace/node_modules/jest-jasmine2/build/queue_runner.js:56:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/codio/workspace/node_modules/jest-jasmine2/build/queue_runner.js:43:19)\n    at promise.then (/home/codio/workspace/node_modules/jest-jasmine2/build/queue_runner.js:87:41)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"],"fullName":"Matching age and city should print '... wanted to date ...'","location":null,"numPassingAsserts":0,"status":"failed","title":"Matching age and city should print '... wanted to date ...'"},{"ancestorTitles":[],"duration":3,"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"p1name wanted to date p2name, but couldn't\"\nReceived: \"\"\n    at Object.toBe (/home/codio/workspace/.guides/.test/ex-1.test.js:35:31)\n    at Object.asyncJestTest (/home/codio/workspace/node_modules/jest-jasmine2/build/jasmine_async.js:108:37)\n    at resolve (/home/codio/workspace/node_modules/jest-jasmine2/build/queue_runner.js:56:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/codio/workspace/node_modules/jest-jasmine2/build/queue_runner.js:43:19)\n    at promise.then (/home/codio/workspace/node_modules/jest-jasmine2/build/queue_runner.js:87:41)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"],"fullName":"Matching age but not city should print '... wanted to date ..., but couldn't'","location":null,"numPassingAsserts":0,"status":"failed","title":"Matching age but not city should print '... wanted to date ..., but couldn't'"},{"ancestorTitles":[],"duration":2,"failureMessages":[],"fullName":"No match on age should print nothing","location":null,"numPassingAsserts":0,"status":"passed","title":"No match on age should print nothing"}],"sourceMaps":{},"skipped":false,"leaks":false}],"wasInterrupted":false}